<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.guigu</groupId>
    <artifactId>springBoot01_HelloWorld</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!-- 不写打包方式的时候默认打war包 -->
    <packaging>jar</packaging>

    <!--
    1.1、依赖管理
        使用SpringBoot的功能，必须先引入SpringBoot的父项目，(每个springBoot的项目都必须引入)
        作用是SpringBoot框架的基本依赖管理，实现自动版本仲裁机制，从而避免jar包版本冲突的问题
        可以将spring-boot-starter-parent理解为SpringBoot版本和兼容的依赖的版本对照表
        可见：spring-boot-starter-parent -> spring-boot-dependencies -> <properties>标签中
            几乎声明了当前使用的SpringBoot版本(2.3.4.RELEASE)兼容的常用的依赖版本号,比如log4j、
            mysql.....,因此在开发过程中引入依赖时不需要再写版本号。·
    -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.4.RELEASE</version>
    </parent>

    <!--
        如果本地安装的mysql版本和依赖管理的默认mysql版本不一致的时候需要自定义依赖版本号
        自定义依赖版本：
            ○ 查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。
            ○ 在当前项目里面重写配置
    -->
    <properties>
        <mysql.version>5.1.43</mysql.version>
    </properties>


    <dependencies>

    <!--
    1.2、自动配置
         ● 使用starter批量引入依赖，starter：一组依赖的集合描述
            依据依赖传递原则，引入starter依赖时，会同时引入start组件依赖的其他组件。
            引用Web启动器：提供Web开发场景所需的底层所有依赖
            注意：所有场景启动器点进去都能看到 <artifactId>spring-boot-starter</artifactId>,
                这是SpringBoot自动配置的核心依赖，是所有场景启动器最底层的依赖
         ● 自动配置:SpringBoot根据引入的依赖对功能组件进行自动配置
           包括：
             ○ 引入了tomcat依赖、自动配置tomcat
             ○ 配置SpringMVC（引入MVC常用组件并自动配置）
             ○ 配置好web常见功能：比如字符编码问题....
             ○ 配置了默认的包结构：主程序所在的包及其所有子包，都能被扫描到，不需要单独配置。
                支持自定义扫描路径：@SpringBootApplication(scanBasePackages="com.atguigu")或者@ComponentScan 指定扫描路径
         ● 各种配置都拥有默认值
            ○ 默认配置最终都是映射到某个类上，如：MultipartProperties
            ○ 配置文件的值最终会绑定每个类上，这个类会在容器中创建对象
         ● 按需加载所有自动配置项
            ○ 非常多的starter
            ○ SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面
            ○ 引入了哪些场景这个场景的自动配置才会生效
    -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- 由于版本号依赖管理的控制机制，引入mysql的依赖后不设置版本，就是使用默认版本 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <!-- Spring Boot configuration annotation processor not found in classpath -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- 引入lombok插件简化JavaBean的开发-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
        </dependency>

        <!-- 开启热部署
             每次修改项目后使用Ctrl+F9，编译项目后生效，修改.java文件相当于自动重启Shift+F10,
             在Web开发的情况下,修改静态资源时，不用重启，效率更高
         -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <version>2.3.4.RELEASE</version>
        </dependency>

    </dependencies>

    <!-- 打包工具插件依赖 -->
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>




<!--
    知识点总结：
        1、引入SpringBoot的父项目，实现自动版本仲裁。
        2、根据不同的开发场景，导入不同的starter场景启动器，从而导入需要的依赖
        3、如果版本仲裁不能满足对指定jar版本的要求，可以自定义jar版本。
        4、自动配置。比如SpringMVC，1>引入SpringMVC组件jar包；2>实现SpringMVC自动配置。
           (包括：文件上传、视图解析、字符编码、前端控制器)
        5、各种配置都拥有默认值
           1> 所有的配置都映射成一个java类，在SpringBoot启动后在IOC容器中创建对象，并接收管理
           2> 配置文件中配置的值，最后都会绑定到指定的类上
        6、默认包结构：主程序MainApplication所在的包，及其下属的所有包都能被扫描到
           允许自定义包结构：@SpringBootApplication(scanBasePackages="com.atguigu")，或者@ComponentScan 指定扫描路径
        7、按需加载所有自动配置项
           1> SpringBoot包含非常多的各种开发场景的Starter
           2> SpringBoot所有场景的自动配置功能都在 spring-boot-autoconfigure 包里面
           3> 引入引入指定场景的Starter,相关的配置才会自动开启
 -->

</project>